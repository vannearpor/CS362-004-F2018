        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// Author: Vannear Por
        -:    2:// Description: This is unit test #2 which will test the
        -:    3:// getWinners function. This test will prepopulate score cards in
        -:    4:// 2 player's hands, then it will calculate the score of each player
        -:    5:// and determine
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <math.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <assert.h>
        -:   15:
        2:   16:int main (int argc, char** argv) {
        -:   17:    struct gameState testGame;
        -:   18:    int playerScores[2];
        -:   19:    
        2:   20:    printf("Unit Test #2: getWinners Function\n");
        -:   21:    
        2:   22:    printf("Test Case 1 Running...\n");
        2:   23:    printf("Populating hand of Player 1\n");
        2:   24:    testGame.hand[0][0] = province; //score +6
        2:   25:    testGame.hand[0][1] = great_hall; //score +1
        2:   26:    testGame.hand[0][2] = curse; //score -1
        2:   27:    testGame.hand[0][3] = duchy; //score +3
        2:   28:    testGame.hand[0][4] = curse; //score -1
        2:   29:    testGame.hand[0][5] = curse; //score -1
        -:   30:    //Player 1 should be 7.
        -:   31:    
        2:   32:    printf("Populating hand of Player 2\n");
        2:   33:    testGame.hand[1][0] = estate; //score +1
        2:   34:    testGame.hand[1][1] = province; //score +6
        2:   35:    testGame.hand[1][2] = province; //score +6
        2:   36:    testGame.hand[1][3] = curse; //score -1
        2:   37:    testGame.hand[1][4] = great_hall; //score +1
        2:   38:    testGame.hand[1][5] = estate; //score +1
        -:   39:    //Player 2 Total should be 14
        -:   40:    
        2:   41:    printf("Player 1's score should be +7\n");
        2:   42:    printf("Player 2's score should be +14\n");
        2:   43:    printf("Calculating winner...");
        -:   44:    
        2:   45:    getWinners(playerScores, &testGame); //Calculates score and determines the winner.
        -:   46:    
        2:   47:    if(playerScores[1] == 1) {
        2:   48:        printf("Unit Test #2 Case 1 Passed!\n");
        -:   49:    }
        -:   50:    else {
    #####:   51:        printf("Unit Test #2 Case 1 Failed!\n");
        -:   52:    }
        -:   53:    
        -:   54:    
        2:   55:    printf("Test Case 2 Running...\n");
        2:   56:    printf("Populating hand of Player 1\n");
        2:   57:    testGame.hand[0][0] = estate; //score +1
        2:   58:    testGame.hand[0][1] = estate; //score +1
        2:   59:    testGame.hand[0][2] = curse; //score -1
        2:   60:    testGame.hand[0][3] = duchy; //score +3
        2:   61:    testGame.hand[0][4] = duchy; //score +3
        2:   62:    testGame.hand[0][5] = duchy; //score +3
        -:   63:    //Player 1 should be 10.
        -:   64:    
        2:   65:    printf("Populating hand of Player 2\n");
        2:   66:    testGame.hand[1][0] = curse; //score -1
        2:   67:    testGame.hand[1][1] = curse; //score -1
        2:   68:    testGame.hand[1][2] = curse; //score -1
        2:   69:    testGame.hand[1][3] = duchy; //score +3
        2:   70:    testGame.hand[1][4] = estate; //score +1
        2:   71:    testGame.hand[1][5] = curse; //score -1
        -:   72:    //Player 2 Total should be 0
        -:   73:    
        2:   74:    printf("Player 1's score should be +10\n");
        2:   75:    printf("Player 2's score should be 0\n");
        2:   76:    printf("Calculating winner...");
        -:   77:    
        2:   78:    getWinners(playerScores, &testGame); //Calculates score and determines the winner.
        -:   79:    
        2:   80:    if(playerScores[0] == 1) {
    #####:   81:        printf("Unit Test #2 Case 2 Passed!\n");
        -:   82:    }
        -:   83:    else {
        2:   84:        printf("Unit Test #2 Case 2 Failed!\n");
        -:   85:    }
        -:   86:    
        2:   87:    printf("--Unit Test #2 End--\n");
        -:   88:    
        2:   89:    return 0;
        -:   90:}
        -:   91:
        -:   92:
