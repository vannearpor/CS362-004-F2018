        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This random test tests the Smithy card function.*/
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <assert.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <time.h>
        -:   12:#include <stdbool.h>
        -:   13:
        -:   14:
        -:   15:int main() {
        -:   16:    struct gameState testGame;
        1:   17:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   18:        sea_hag, tribute, smithy};
        -:   19:    
        -:   20:    int i;
        -:   21:    bool testFlag;
        -:   22:    int deckTotal, handTotal;
        -:   23:    int startDeck, finishDeck;
        -:   24:    int startHand, finishHand;
        1:   25:    int startDiscardPile = 0;
        -:   26:    int finishDiscardPile;
        -:   27:    int handPos;
        -:   28:    
        1:   29:    int failCount = 0;
        1:   30:    int passCount = 0;
        -:   31:    
        1:   32:    int players = 2;
        1:   33:    int currentPlayer = 0;
        1:   34:    int testSeed = 100;
        -:   35:    
        1:   36:    srand(time(NULL));
        -:   37:    
        -:   38:    //Run test iterations
   100002:   39:    for(i = 0; i < 50000; i++){
    50000:   40:        initializeGame(players, k, testSeed, &testGame);
    50000:   41:        testFlag = true;
    50000:   42:        deckTotal = rand() % 501;   //get random deck total between 0 and 500;
    50000:   43:        handTotal = rand() % 501;   //get random hand total between 0 and 500;
        -:   44:        
        -:   45:        //get numbers for deck and hand
    50000:   46:        testGame.deckCount[0] = deckTotal - handTotal;
    50000:   47:        startDeck = testGame.deckCount[0];
    50000:   48:        testGame.handCount[0] = handTotal;
    50000:   49:        startHand = testGame.handCount[0];
    50000:   50:        handPos = testGame.hand[currentPlayer][testGame.handCount[currentPlayer] - 1];
        -:   51:        
    50000:   52:        testGame.playedCardCount = startDiscardPile;
        -:   53:        
        -:   54:        //Call function
    50000:   55:        playSmithy(&testGame, handPos);
        -:   56:        
        -:   57:        //Deck and hand counts after function is called
    50000:   58:        finishDeck = testGame.deckCount[0];
    50000:   59:        finishHand = testGame.handCount[0];
    50000:   60:        finishDiscardPile = testGame.playedCardCount;
        -:   61:        
        -:   62:        //Check for fail game states
    50000:   63:        if (finishDeck != (startDeck-1)){
    49921:   64:            testFlag = false;
    49921:   65:        }
        -:   66:        
    50000:   67:        if (finishHand != startHand){
    49921:   68:            testFlag = false;
    49921:   69:        }
        -:   70:        
    50000:   71:        if (finishDiscardPile != 1){
    #####:   72:            testFlag = false;
    #####:   73:        }
        -:   74:        
    50000:   75:        if (testFlag == false){
    49921:   76:            failCount++;
    49921:   77:            printf("\nTests Failed: %d\n", failCount);
    49921:   78:        }
        -:   79:        else{
       79:   80:            passCount++;
       79:   81:            printf("\nTests Passed: %d\n", passCount);
        -:   82:        }
        -:   83:        
    50000:   84:    }
        1:   85:    return 0;
        -:   86:}
